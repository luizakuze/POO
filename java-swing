package engtelecom.poo;

import java.awt.Image;
import java.awt.MediaTracker;
import java.net.URL;

import javax.swing.ImageIcon;

import edu.princeton.cs.algs4.Draw;

public class Elemento {

    private double x;
    private double y;
    private String primeiraImagem;
    private String segundaImagem;
    private boolean qualImagem;
    private int largura;
    private int altura;

    public Elemento(double x, double y, String primeiraImagem, String segundaImagem) {
        this.x = x;
        this.y = y;
        this.primeiraImagem = primeiraImagem;
        this.segundaImagem = segundaImagem;
        this.qualImagem = true;
        Image imagem = carregarImagem(primeiraImagem);
        this.altura = imagem.getHeight(null);
        this.largura = imagem.getWidth(null);
    }

    private Image carregarImagem(String arquivo) {
        ImageIcon ii = new ImageIcon(arquivo);

        if ((ii == null) || (ii.getImageLoadStatus() != MediaTracker.COMPLETE)) {
            URL url = Draw.class.getResource("/" + arquivo);
            if (url == null)
                throw new IllegalArgumentException("imagem " + arquivo + " não encontrada");
            ii = new ImageIcon(url);
        }

        Image image = ii.getImage();
        return image;
    }

    public void desenhar(Draw draw) {
        if (this.qualImagem) {
            draw.picture(this.x, this.y, this.primeiraImagem);
        } else {
            draw.picture(this.x, this.y, this.segundaImagem);
        }
    }

    /**
     * Verifica se as coordenadas do clique do mouse estão contidas dentro dos
     * limites da carta. O método draw.picture desenha a imagem a partir do centro
     * (x,y)
     * 
     * @param px -- coordenada X do clique
     * @param py -- coordenada Y do clique
     * @return true se o clique foi dentro da area da carta
     */
    public boolean clicouDentro(double px, double py) {
        // TODO precisa ser implementado
        return true;
    }

    public void virar() {
        this.qualImagem = !this.qualImagem;
    }

    /**
     * @return the x
     */
    public double getX() {
        return x;
    }

    /**
     * @param x the x to set
     */
    public void setX(double x) {
        this.x = x;
    }

    /**
     * @return the y
     */
    public double getY() {
        return y;
    }

    /**
     * @param y the y to set
     */
    public void setY(double y) {
        this.y = y;
    }
}



package engtelecom.poo;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.Random;

import javax.swing.JFrame;

import edu.princeton.cs.algs4.Draw;
import edu.princeton.cs.algs4.DrawListener;
import edu.princeton.cs.algs4.StdAudio;

public class App implements DrawListener {

    private Draw draw;
    private Elemento elemento;

    public App(char naipe, char valor) {
        this.draw = new Draw("Jogo de cartas");
        draw.setXscale(0, 1600);
        draw.setYscale(0, 800);
        this.draw.addListener(this);

        // Para evitar piscar na tela ao desenhar os componentes
        // Veja mais em
        // https://docs.oracle.com/javase/tutorial/extra/fullscreen/doublebuf.html
        this.draw.enableDoubleBuffering();

        this.draw.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        String carta = String.format("cartas/%c%c.png", valor, naipe);
        this.elemento = new Elemento(400, 300, carta, "cartas/fundoa.png");
    }

    /**
     * Limpa a área de desenho não visível, pede para o elemento se desenhar e
     * depois essa área é exibida
     */
    public void desenhar() {
        // Limpa a área de desenho
        this.draw.clear(Color.DARK_GRAY);
        // Pede para o elemento se desenhar
        elemento.desenhar(this.draw);
        // Com double buffering é necessário invocar o show para exibir a área de
        // desenho onde o elemento foi desenhado
        this.draw.show();
    }

    @Override
    public void mousePressed(double x, double y) {
        if (elemento.clicouDentro(x, y)) {
            elemento.virar();
        }
        this.desenhar();
    }

    @Override
    public void mouseDragged(double x, double y) {
    }

    @Override
    public void mouseReleased(double x, double y) {
    }

    @Override
    public void mouseClicked(double x, double y) {
    }

    @Override
    public void keyTyped(char c) {
    }

    @Override
    public void keyPressed(int keycode) {
        if (keycode == KeyEvent.VK_S) {
            this.draw.setPenColor(Color.WHITE);
            this.draw.text(400, 200, "Tecla S foi pressionada");
            this.draw.show();

            // https://introcs.cs.princeton.edu/java/stdlib/javadoc/StdAudio.html
            StdAudio.play("sons/game-over.wav");
        }

    }

    @Override
    public void keyReleased(int keycode) {
    }

    public static void main(String[] args) {
        Draw d = new Draw();

    }

}

